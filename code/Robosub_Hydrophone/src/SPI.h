/*
 * SPI.h
 *
 *  Created on: Jan 18, 2015
 * Author : Anol Paisal
 * Company : EmOne (Thailand) Co.,Ltd.
 * Email : anolpaisal@gmail.com
 * Copyright @ 2015
 */

#ifndef SPI_H_
#define SPI_H_

#include "AD1939.h"
#include "common.h"

//#define USE_48_KHZ_SAMPLE_RATE
//#define USE_96_KHZ_SAMPLE_RATE
#define USE_192_KHZ_SAMPLE_RATE

unsigned char ConfigParam1939_192KHZ_I2S[] = {
		(AD1939_ADDR), DACMUTE, 0x00,
		(AD1939_ADDR), CLKCTRL0, DIS_ADC_DAC | INPUT256 | PLL_IN_MCLK | MCLK_OUT_OFF | PLL_PWR_DWN,
		(AD1939_ADDR), CLKCTRL1, DAC_CLK_PLL | ADC_CLK_PLL | DIS_VREF,
		(AD1939_ADDR), DACCTRL0, DAC_FMT_I2S | DAC_BCLK_DLY_1 | DAC_SR_192K,
		(AD1939_ADDR), DACCTRL1, DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE | DAC_CHANNELS_2 | DAC_LATCH_MID, //Ddebug
		(AD1939_ADDR), DACCTRL1, DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE | DAC_CHANNELS_2 | DAC_LATCH_MID, //Ddebug
		(AD1939_ADDR), DACCTRL2, DAC_WIDTH_24 | DAC_DEEMPH_FLAT,
		(AD1939_ADDR), ADCCTRL0, ADC_SR_192K,
		(AD1939_ADDR), ADCCTRL1, ADC_LATCH_MID | ADC_FMT_I2S | ADC_BCLK_DLY_1 | ADC_WIDTH_24,
		(AD1939_ADDR), ADCCTRL2, ADC_BCLK_SRC_INTERNAL | ADC_BCLK_MASTER | ADC_CHANNELS_2
				| ADC_LRCLK_MASTER | ADC_LRCLK_FMT_50_50 | ADC_LRCLK_POL_NORM
				| ADC_BCLK_POL_NORM, // NDdebug
		(AD1939_ADDR), ADCCTRL2, ADC_BCLK_SRC_INTERNAL | ADC_BCLK_MASTER | ADC_CHANNELS_2
				| ADC_LRCLK_MASTER | ADC_LRCLK_FMT_50_50 | ADC_LRCLK_POL_NORM
				| ADC_BCLK_POL_NORM, // NDdebug
		(AD1939_ADDR), DACVOL_L1, DACVOL_HI,
		(AD1939_ADDR), DACVOL_R1, DACVOL_HI,
		(AD1939_ADDR), DACVOL_L2, DACVOL_HI,
		(AD1939_ADDR), DACVOL_R2, DACVOL_HI,
		(AD1939_ADDR), DACVOL_L3, DACVOL_HI,
		(AD1939_ADDR), DACVOL_R3, DACVOL_HI,
		(AD1939_ADDR), DACVOL_L4, DACVOL_HI,
		(AD1939_ADDR), DACVOL_R4, DACVOL_HI,
		(AD1939_ADDR), CLKCTRL0, DIS_ADC_DAC | PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256 | PLL_PWR_UP,
		(AD1939_ADDR), CLKCTRL0, ENA_ADC_DAC | PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256 | PLL_PWR_UP,
		(AD1939_ADDR), DACMUTE, 0x00,
};

unsigned char ConfigParam1939_192KHZ_TDM [] = {
            (AD1939_ADDR), CLKCTRL0, DIS_ADC_DAC | INPUT256 | PLL_IN_MCLK | MCLK_OUT_OFF | PLL_PWR_DWN,
            (AD1939_ADDR), CLKCTRL1, DAC_CLK_PLL | ADC_CLK_PLL | DIS_VREF,
            (AD1939_ADDR), DACCTRL1, DAC_LRCLK_POL_INV | DAC_BCLK_POL_INV | DAC_CHANNELS_4 | DAC_LATCH_MID | DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE,
            (AD1939_ADDR), DACCTRL1, DAC_LRCLK_POL_INV | DAC_BCLK_POL_INV | DAC_CHANNELS_4 | DAC_LATCH_MID | DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE,
            (AD1939_ADDR), DACCTRL2, DAC_WIDTH_24,
	        (AD1939_ADDR), DACCTRL0, DAC_FMT_DUALTDM | DAC_BCLK_DLY_1 | DAC_SR_192K,
            (AD1939_ADDR), DACCTRL0, DAC_FMT_DUALTDM | DAC_BCLK_DLY_1 | DAC_SR_192K,
            (AD1939_ADDR), ADCCTRL0, ADC_SR_192K | ADC_HP_FILT_ON ,
            (AD1939_ADDR), ADCCTRL1, ADC_LATCH_MID | ADC_FMT_TDM | ADC_WIDTH_24,
            (AD1939_ADDR), ADCCTRL2, ADC_BCLK_SRC_INTERNAL | ADC_BCLK_MASTER | ADC_CHANNELS_4 | ADC_LRCLK_MASTER | ADC_LRCLK_POL_INV | ADC_BCLK_POL_INV | ADC_LRCLK_FMT_PULSE,
            (AD1939_ADDR), DACVOL_L1, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_R1, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_L2, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_R2, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_L3, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_R3, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_L4, DACVOL_MAX,
            (AD1939_ADDR), DACVOL_R4, DACVOL_MAX,
            (AD1939_ADDR), CLKCTRL0, DIS_ADC_DAC | PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256 | PLL_PWR_UP,
            (AD1939_ADDR), CLKCTRL0, ENA_ADC_DAC | PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256 | PLL_PWR_UP,
            (AD1939_ADDR), DACMUTE, 0x00,
            };

unsigned char ConfigParam1939[] =
		{  (AD1939_ADDR), DACMUTE, 0x00, (AD1939_ADDR), CLKCTRL0, DIS_ADC_DAC
				| INPUT256 | PLL_IN_MCLK | MCLK_OUT_OFF | PLL_PWR_DWN,
				(AD1939_ADDR), CLKCTRL1, DAC_CLK_PLL | ADC_CLK_PLL | DIS_VREF,

#ifdef USE_48_KHZ_SAMPLE_RATE
				(AD1939_ADDR), DACCTRL0, DAC_FMT_I2S | DAC_BCLK_DLY_1 | DAC_SR_48K,
#endif

#ifdef USE_96_KHZ_SAMPLE_RATE
				(AD1939_ADDR), DACCTRL0, DAC_FMT_I2S | DAC_BCLK_DLY_1 | DAC_SR_96K,
#endif
#ifdef USE_192_KHZ_SAMPLE_RATE
				(AD1939_ADDR), DACCTRL0, DAC_FMT_I2S | DAC_BCLK_DLY_1
						| DAC_SR_192K,
#endif

				(AD1939_ADDR), DACCTRL1,
				DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE | DAC_CHANNELS_2
						| DAC_LATCH_MID, //Ddebug
				(AD1939_ADDR), DACCTRL1,
				DAC_BCLK_SLAVE | DAC_LRCLK_SLAVE | DAC_CHANNELS_2
						| DAC_LATCH_MID, //Ddebug
				(AD1939_ADDR), DACCTRL2, DAC_WIDTH_24,
#ifdef USE_48_KHZ_SAMPLE_RATE
				(AD1939_ADDR), ADCCTRL0, ADC_SR_48K,
#endif
#ifdef USE_96_KHZ_SAMPLE_RATE
				(AD1939_ADDR), ADCCTRL0, ADC_SR_96K,
#endif
#ifdef USE_192_KHZ_SAMPLE_RATE
				(AD1939_ADDR), ADCCTRL0, ADC_SR_192K,
#endif
				(AD1939_ADDR), ADCCTRL1, ADC_LATCH_MID | ADC_FMT_I2S
						| ADC_BCLK_DLY_1 | ADC_WIDTH_24,

				(AD1939_ADDR), ADCCTRL2,
				ADC_BCLK_SRC_INTERNAL | ADC_BCLK_MASTER | ADC_CHANNELS_2
						| ADC_LRCLK_MASTER | ADC_LRCLK_FMT_50_50
						| ADC_LRCLK_POL_NORM | ADC_BCLK_POL_NORM, // NDdebug
				(AD1939_ADDR), ADCCTRL2,
				ADC_BCLK_SRC_INTERNAL | ADC_BCLK_MASTER | ADC_CHANNELS_2
						| ADC_LRCLK_MASTER | ADC_LRCLK_FMT_50_50
						| ADC_LRCLK_POL_NORM | ADC_BCLK_POL_NORM, // NDdebug
				(AD1939_ADDR), DACVOL_L1, DACVOL_MAX, (AD1939_ADDR), DACVOL_R1,
				DACVOL_MAX, (AD1939_ADDR), DACVOL_L2, DACVOL_MAX, (AD1939_ADDR),
				DACVOL_R2, DACVOL_MAX, (AD1939_ADDR), DACVOL_L3, DACVOL_MAX,
				(AD1939_ADDR), DACVOL_R3, DACVOL_MAX, (AD1939_ADDR), DACVOL_L4,
				DACVOL_MAX, (AD1939_ADDR), DACVOL_R4, DACVOL_MAX, (AD1939_ADDR),
				CLKCTRL0, DIS_ADC_DAC | PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256
						| PLL_PWR_UP, (AD1939_ADDR), CLKCTRL0, ENA_ADC_DAC
						| PLL_IN_MCLK | MCLK_OUT_OFF | INPUT256 | PLL_PWR_UP,
				(AD1939_ADDR), DACMUTE, 0x00, };

unsigned char AD1938_Regs_Read[sizeof(ConfigParam1939) / 3];

volatile int spiFlag;

//void Init1939viaSPI();
void Init1939viaSPI(MODE_SAMPLE_RATE sampe_rate);
void SetupSPI1939(unsigned int SPI_Flag);
void DisableSPI1939(void);
void Configure1939Register(unsigned char rwaddr, unsigned char regaddr,
		unsigned char regdata, unsigned int spiselect);
unsigned char Get1939Register(unsigned char regaddr, unsigned int spiselect) ;

#endif /* SPI_H_ */
